The purpose of these exercises is to help you develop your skill. Please do all these problems without using a computer or calculator. 
Taking the time to practice will give you a MUCH better ability and understanding of the processes.

NOTE: Questions about carry and overflow assume signed modular arithmetic, NOT saturated arithmetic.

SECOND NOTE: If you write these out and show your work, you can get partial credit. 
Even though each problem is worth one point, you can still get 0.25 point, 0.5 point, or even 0.9 point if you show your calculations. 
However, if you are 100% SURE that your answer is correct, feel free to only submit the answer.

1) Binary 10111101 in hex is:
1011 1101 -> 11 13 -> BD
2) Binary 1011110100000001 as an unsigned decimal is:
11 13 0 1 -> BD01 -> 11*16^3 + 13*16^2 + 0*16^1 + 1*16^0 = 45056 + 3328 + 0 + 1 = 48,385
3) Binary 1011110100000001 as a signed decimal is:
starts with 1 so negative so 0100 0010 1111 1110 + 1 = 0100 0010 1111 1111 -> 4 2 15 15 -> 42FF 
-> 4*16^3 + 2*16^2 + 15*16^1 + 15*16^0 = 16384 + 512 + 240 + 15 = -17,151
4) Decimal 8000 encoded in 16-bits (unsigned) is in hex:
16^3 highest goes into 8000 once (1) with remainder 3904 then 16^2 goes into that 15 times remainder 
64 then 16 goes into 64 4 times remainder 0 then 1 goes into 0 0 times so we get 0x1F40
5) Decimal 8000 encoded in 16-bits (signed) is in hex:
1F40 -> 0001 1111 0100 0000 leads with a 0 so positive so it is 0x1F40
6) Decimal -11 encoded in 16-bits (signed) is in hex:
11 -> binary is 0000 0000 0000 1011 since negative do 1111 1111 1111 0100 + 1 = 1111 1111 1111 0101 
which is FFF5 so we get 0xFFF5
7) Decimal -32717 encoded in 16-bits (signed) is in hex:
	Two’s Complement for negative value
	-32717 > 0111 1111 1100 1101
	1000 0000 0011 0010
	+		      1
	1000 0000 0011 0011
	Hex: 8033
8) Hex FAC3 in binary is:
	1111 1010 1100 0011
9) Hex FAC3 as an unsigned decimal is:
	1111 1010 1100 0011
	(32768) + (16384) + (8192) + (4096) + (2048) + (512) + (128) + (64) + (3)
	= 64,195
10) Hex FAC3 as a signed decimal is:
	1111 1010 1100 0011
	-		      1
	1111 1010 1100 0010
	0000 0101 0011 1101
	[(13) + (16) + (32) + (256) + (1024)] (-1) 
	= -1341
11) Hex 0064 in binary is:
	0000 0000 0110 0100
12) Hex 0064 as an unsigned decimal is:
	0064 = 6 * (16^1) + 4 * (16^0) = 94 + 4 = 100
13) Hex 0064 as a signed decimal is:
	0064 = 0000 0000 0110 0100 = 4 + 32 + 64 = 100
14) Hex 8000 in binary is:
	8000 = 1000 0000 0000 0000
15) Hex 8000 as an unsigned decimal is:
	8000 = 8 * (16^3) + 0 * (16^2) + 0 * (16^1) + 0 * (16^0) = 32768
16) Hex 8000 as a signed decimal is:
	8000 = 1000 0000 0000 0000 which we convert to 0111 1111 1111 1111
	And add 1 = 1000 0000 0000 0000 = -32768
17) If we had 20-bit registers, the smallest signed decimal integer value would be:
  	-524288
18) If we had 20-bit registers, the largest signed decimal integer value would be:
  max = 2^(20−1)−1 = 2^(19)−1
  2^(19) = 524288
  2^(19) - 1 = 524287
19) The modular sum of 16-bit hex values 3511 + 4FFC is:
  3   5   1   1
 + 4   F   F   C
 ----------------
   8   5   0   D
  0x850D
20) The saturated sum of 16-bit hex values 3511 + 4FFC is:
  850D
21) The 16-bit operation 0x3511 + 0x4FFC has a carry (Y or N):
  No. Maximum representable in 16 bits: 0𝑥𝐹𝐹𝐹𝐹 = 65,535. Our sum: 34,061 < 65,535. Since the sum fits entirely in 16 bits, no carry is generated.
22) The 16-bit operation 0x3511 + 0x4FFC has a overflows (Y or N):
  Yes. Signed 16-bit max = +32,767. Our result 34,061 > 32,767. That exceeds the positive bound.
23) The modular sum of 16-bit hex values 6159 + F702 is:
6159 is 6*16^3 + 1*16^2 + 5*16 + 9 = 24576 + 256+ 80 +9 = 24,921. F702 is 15*16^3 + 7*16^2 + 0*16 + 2 = 61440 + 1792 + 0 + 2 = 63,234.
24921 + 63234 = 88,155. 16 bit is 2^16 = 65,536 so 88155-65536 = 22, 619. 22619/16^3 = 5 remainder 2139/16^2 = 8 remainder 91/16 = 5 
remainder 11 -> 0x585B
24) The saturated sum of 16-bit hex values 6159 + F702 is:
Max is 0xFFFF = 65,535 so the saturated sum is 0xFFFF.
25) The 16-bit operation 0x6159 + 0xF702 has a carry (Y or N):
Yes. 6159+F792 = 88,155 carry occurs if the sum is greater than 2^16 or 65,535. 
26) The 16-bit operation 0x6159 + 0xF702 has a overflows (Y or N):
No. Positive overflow is over 32,767, negative over flow is below -32,8=768. 6159 is positive and is 24,921 then F702 is negative so it is 
0000 1000 1111 1101 + 1 = 0000 1000 1111 1110 = 08FE = -2,046. 24,921-2,046 = 22, 875. 
27) The modular sum of 16-bit hex values EEEE + C00C is:
	   1110 1110 1110 1110 
	+1100 0000 0000 1100
	1 1010 1110 1111 1010
	  E E E E
	+C 0 0 C
	1 A E F A
(10) + (16) + (32) + (64) + (128) + (512) + (1024) + (2048) + (8192) + (32768) 
= 44794
28) The saturated sum of 16-bit hex values EEEE + C00C is:
	Overflow > FFFF
	= 65,535
29) The 16-bit operation 9EEE + AB0C has a carry (Y or N):
	  9 E E E
	+A B 0 C
	1 4 9 F A
	YES 
30) The 16-bit operation 9EEE + AB0C has a overflows (Y or N):
	-24850 + (-21748) = -46598 which is out of range -32768
	YES
31) The negation of 16-bit word 0xB00F is:
  0xB00F = 1011 0000 0000 1111 -> 0100 1111 1111 0000 + 1 = 0100 1111 1111 0001 = 0x4FF1
32) The negation of 16-bit word 0x2232 is:
  0x2232 = 0010 0010 0011 0010 -> 1101 1101 1100 1101 + 1 = 1101 1101 1100 1110 = 0xDDCE
33) The negation of 16-bit word 0x8000 is:
  0x8000 = 1000 0000 0000 0000 -> 0111 1111 1111 1111 + 1 = 1000 0000 0000 0000 = 0x8000
34) The negation of 32-bit word 0xFFF329BA is:
    0x000CD646
35) Hex 43700000, when interpreted as an IEEE-754 pattern, is in decimal:
  0x43 70 00 00 → 0100 0011 0111 0000 0000 0000 0000 0000
  1000 0110 = 0𝑥86= 134
  0x86=134 → unbiased E=134−127=7
  0x700000 → 
  𝑓=0𝑥700000/2^23 = 7,340,032/8,388,608 = 0.875
  (+1)×27×1.875=128×1.875 = 240.0
  =240.0
36) Hex C0FF0000, when interpreted as an IEEE-754 pattern, is in decimal:
  0xC0 FF 00 00 → 1100 0000 1111 1111 0000 0000 0000 0000
  1000 0001 = 0𝑥81 = 129. unbiased E = 129−127 = 2
  0x7F0000 → 𝑓=0𝑥7𝐹0000223 = 8,323,072/8,388,608 =0.9921875 =127/128
  −1×22×1.9921875=−4×1.9921875=−7.96875
  = −7.96875

These problems are difficult and will require you to do some research to get the answers. 
You may use websites if you wish to find the answers, as long as you include a URL link to the page you used. 
These problems are considered optional and you will get extra credit for getting them correct, one point per problem. 
For any you attempt for which your answer is incorrect, you will NOT be penalized, you just won't get any credit for that one problem.
NOTE: float means floating point, a number with a decimal point in it like 123.45. 
The terms 'single precision float' and '32-bit float' are treated as the same thing.
  
37) 96.03125 as a 32-bit float, in hex is:
positive so sign 0 96/2=48 r0, 48/2=24 r0, 24/2=12 r0, 12/2=6 r0, 6/2=3 r0, 3/2=1 r1, ½=0 r1 -> 0110 0000. .03125*2=.0625 r0, 
.0625*2=.125 r0, .125*25 r0, .25*2=.5 r0, .5*2=1 r1 -> .00001. So the binary is 01100000.00001. 0110 = 6, 0000 = 0 = 0x60. .0000 1 -> 
0000=0 then 1000 = 8 so its .08. The hex form is 0x60.08.
38) -16777216 as a 32-bit float, in hex is:
39) The largest finite IEEE-754 single precision float, in hex is:
40) The smallest finite IEEE-754 single precision float, in hex is:
	1  0000 0001  000 0000 0000 0000 0000 0000
	0x80800000
41) The largest nonzero negative IEEE-754 single precision float, in hex is:
	1 bit - 8 bit - 23 bit
	1  1111 1110  111 1111 1111 1111 1111 1111
	0xFF7FFFFF
42) The smallest nonezero positive IEEE-754 single precision float, in hex is:
	0  0000 0001  0000 000 0000 0000 0000 0000
	0x00800000
43) -5.125 X 290 as a 32-bit float, in hex is:
  First multiply those two numbers: -5.125x290 = -1486.25, and then turn the integer part into binary by dividing with two: 1486 = 10111001110, and with the floating part 0.25 we are supposed to do the opposite to get to binary, which is multiply by two: 0.01. 
So we have: 10111001010.01 = 1.011100101001 * 2^10 from which
S: 1
E: 10 + 127 = 137 -> 10001001 in binary
M: 01110010100100000000000
Now add all those together: 
1 10001001 01110010100100000000000 and turn to hex = 0xC4B94800

44) 2-138 as a 32-bit float, in hex is:
  Same process as above: 2-138 = -136 
136 = 10001000 -> 1.0001000 * 2^7
S: 1
E: 7+127 = 134 -> 10000110
M: 00010000000000000000000
1 10000110 00010000000000000000000 -> 0xC3080000

45) 1.5 X 2-143 as a 32-bit float, in hex is:
  Same process as the previous two: 
1.5X2-143 = 3-143 = -140
140 = 10001100 -> 1.0001100 *2^7
S: 1
E: 7+127 = 134 -> 10000110
M: 0001000000000000000000
1 1000110 0001000000000000000000 -> 0xC30C0000 

46) Try this for a challenge, a puzzle, or the experience:
Hex C059000000000000, when iterpreted as a 64-bit IEEE-754 pattern, is in decimal:
  -100.0
